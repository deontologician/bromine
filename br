#!/usr/bin/env python2

import subprocess
import ConfigParser as configparser
import shutil
import os.path
import os
import stat
import re
import functools
import errno
import shutil

import click


BROMINE_DIR = None
PROJECT_DIR = None
BRANCHES_DIR = None


VERBOSE = False
DRY_RUN = False

INVALID_NAME = type('Invalid', (object,), {})()


def echo(fmt, *args, **kwargs):
    click.echo(fmt.format(*args, **kwargs), **kwargs)


def trace(fmt, *args, **kwargs):
    '''Simplifies echoing only on the verbose flag'''
    if VERBOSE:
        echo(fmt, *args, **kwargs)
    elif DRY_RUN:
        echo("Would be " + fmt, *args, **kwargs)

def move(source, dest):
    '''Moves a file, skipping it if DRY_RUN active'''
    trace("Moving {} -> {}", source, dest)
    if not DRY_RUN:
        dest_dir = os.path.dirname(dest)
        if not os.path.exists(dest_dir):
            trace("Making parent dir {}", dest_dir)
            os.makedirs(dest_dir)
            shutil.copystat(os.path.dirname(source), dest_dir)
        shutil.move(source, dest)

def destructive_subcall(*args, **kwargs):
    '''Used for subprocess calls that may cause changes'''
    if not DRY_RUN:
        return subprocess.call(*args, **kwargs)
    else:
        return subprocess.call('true', **kwargs)

def rmdir(dirname):
    '''Delete a directory unless dry running'''
    if not DRY_RUN:
        return os.rmdir(dirname)


class Options(object):
    def __init__(self):
        self.start_cmd = None
        self.end_cmd = None
        self.restart_cmd = None

O = Options()

def update_currently_linked_file(branchname=''):
    '''Write the given branch name to the checkout file'''
    with open(os.path.join(BROMINE_DIR, 'currently_linked'), 'w') as cl:
        cl.write(branchname)

def get_currently_linked():
    '''Return the branch that's currently linked into the project
    directory. Will be an empty string if nothing is linked'''
    with open(os.path.join(BROMINE_DIR, 'currently_linked'), 'r') as cl:
        return cl.read()

def assert_bromine_dir(config_dir):
    '''Ensures the bromine directory is set up and has the right
    structure'''
    global BROMINE_DIR, PROJECT_DIR, BRANCHES_DIR
    BROMINE_DIR = config_dir
    PROJECT_DIR = os.path.dirname(BROMINE_DIR)
    BRANCHES_DIR = os.path.join(BROMINE_DIR, 'branches')
    trace("Bromine dir: {}", BROMINE_DIR)
    trace("Project dir: {}", PROJECT_DIR)
    trace("Branches dir: {}", BRANCHES_DIR)
    if not os.path.exists(config_dir):
        trace("Creating {}", BROMINE_DIR)
        os.mkdir(BROMINE_DIR)

        conf_file = os.path.join(BROMINE_DIR, 'brominerc')
        trace("Creating {}", conf_file)
        with open(conf_file, 'w') as f:
            f.write('[server]\n'
                    'start_cmd=\n'
                    'stop_cmd=\n'
                    '# defaults to start_cmd then stop_cmd\n'
                    'restart_cmd=\n')

        trace("Creating {}", BRANCHES_DIR)
        os.mkdir(BRANCHES_DIR)


def find_config_dir():
    '''Search up the filesystem for the location that the .bromine
    directory is or should be. If it finds a .git directory, it will
    create a .bromine directory next to it'''
    path = os.getcwd()
    while path:
        for subdir in ('.bromine', '.git'):
            prospective = os.path.join(path, subdir)
            trace("Checking for {}...", prospective, nl=False)
            if os.path.isdir(prospective):
                trace("  found!")
                config_dir = os.path.join(path, '.bromine')
                assert_bromine_dir(config_dir)
                return config_dir
            else:
                trace("  not found.")
        path = path.rsplit('/', 1)[0]

def load_config():
    global O
    find_config_dir() # sets BROMINE_DIR
    trace("Reading config file {}", BROMINE_DIR+'/brominerc')
    conf = configparser.SafeConfigParser()
    conf.read(os.path.join(BROMINE_DIR, 'brominerc'))
    if conf.has_option('server', 'start_cmd'):
        O.start_cmd = conf.get('server', 'start_cmd')
        trace("Start command set to: {}", O.start_cmd)
    if conf.has_option('server', 'stop_cmd'):
        O.stop_cmd = conf.get('server', 'stop_cmd')
        trace("Stop command set to: {}", O.stop_cmd)
    if conf.has_option('server', 'restart_cmd'):
        O.restart_cmd = conf.get('server', 'restart_cmd')
        trace("Restart command set to: {}", O.restart_cmd)

@click.group()
@click.option('--verbose', '-v', is_flag=True, default=False, help='Verbose output')
@click.option('--dry-run', '-d', is_flag=True, default=False,
              help="Don't do anything, just report what would be done")
def main(verbose, dry_run):
    '''Manage non-source code materials when switching branches'''
    global VERBOSE, DRY_RUN
    VERBOSE, DRY_RUN = verbose, dry_run
    load_config()


@main.command()
@click.argument("branch")
@click.option('--ignore-server', '-i', is_flag=True,
              help="Don't turn the server on or off when switching")
@click.pass_context
def switch(ctx, branch, ignore_server):
    if not ignore_server:
        ctx.invoke(stop)
    ctx.invoke(stash)
    if subprocess.call(['git', 'checkout', branch], cwd=PROJECT_DIR) != 0:
        echo("Switching branches failed. Unstashing branch real quick...")
        ctx.invoke(unstash)  # put stashed files back where we found them
        exit(1)
    ctx.invoke(unstash, name=branch)
    if not ignore_server:
        ctx.invoke(start)


@main.command()
@click.option('--name', default=INVALID_NAME, help="Name to stash under")
@click.option('--clobber', is_flag=True,
              help="Overwrite existing stashed files")
def stash(name, clobber):
    '''Move git untracked files into bromine storage'''
    if name is INVALID_NAME:
        name = get_current_branch()
    trace("Stashing to {}", name)
    branch_path = branch_dir(name)
    if not os.path.exists(branch_path):
        os.mkdir(branch_path)
    else:
        # todo: prompt if they want to override it
        pass

    to_move = (both_paths(branch_path, current_dir, f)
               for f in clean_report(PROJECT_DIR))

    moved_anything = False
    for project_file, bromine_file in to_move:
        moved_anything = True
        if not move_merge(project_file, bromine_file, clobber):
            exit(1)

    if not moved_anything:
        echo("Nothing to stash for branch {}", name)
        return


def clean_report(directory):
    removable = re.compile(r'Would remove (.*)')
    git_clean = subprocess.Popen(
        ['git', 'clean', '--dry-run', '-x', '-d'],
        cwd=directory,
        stdout=subprocess.PIPE,
    )
    current_dir = os.getcwd()
    for line in git_clean.stdout:
        filename = removable.search(line).groups()[0]
        if filename and filename != '.bromine/':
            yield filename.rstrip('/')


@main.command()
@click.argument('name', default=INVALID_NAME)
@click.option('--clobber', is_flag=True,
              help="Clobber existing files in the project directory "
              "when unstashing")
def unstash(name, clobber):
    '''Move stashed files back to the project dir'''
    if name is INVALID_NAME:
        name = get_current_branch()
    branch_path = branch_dir(name)
    trace("Unstashing from {}", branch_path)
    if not os.path.exists(branch_path):
        echo("Nothing to unstash for branch {}", name)
        return
    get_paths = functools.partial(both_paths, branch_path, os.getcwd())
    to_replace = [get_paths(filename) for filename in os.listdir(branch_path)]
    for project_file, bromine_file in to_replace:
        if not move_merge(bromine_file, project_file, clobber):
            exit(1)

def move_merge(source, dest, clobber=False):
    '''Moves a list of files to their destination. The filenames need
    to be in either absolute format or relative to the current working
    directory because this method calls os.listdir recursively if
    necessary'''
    source_type, dest_type = path_type(source), path_type(dest)
    if source_type == 'dir' and dest_type == 'dir':
        source_files = os.listdir(source)
        for subfile in source_files:
            sub_source = os.path.join(source, subfile)
            sub_dest = os.path.join(dest, subfile)
            if not move_merge(sub_source, sub_dest, clobber):
                return False
        return True
    elif source_type == "dir" and dest_type == "file":
        echo("Trying to copy a directory over an existing file!\n"
             "{} is a directory\n"
             "{} is a regular file", source, dest)
        return False
    elif source_type == "file" and dest_type == "dir":
        echo("Trying to copy a file over an existing directory!\n"
             "{} is a regular file\n"
             "{} is a directory", source, dest)
        return False
    elif source_type == "file" and dest_type != "non-existent" and not clobber:
        echo("Trying to write a file over another one!\n"
             "{} would be overwritten\n"
             "pass the --clobber option if you really want to do this", dest)
        return False
    elif dest_type == "non-existent":
        trace("Moving ./{} -> ./{}", source, dest)
        move(source, dest)
    elif source_type in {'socket', 'fifo', 'mount', 'other'}:
        trace("Skipping {} since it is a {}", source, source_type)
        trace("(Bromine doesn't move anything "
              "but regular files and directories)")
    else:
        assert False, "This shouldn't happen!"
    return True


def path_type(path):
    if not os.path.exists(path):
        return 'non-existent'
    elif os.path.isdir(path):
        return 'dir'
    elif os.path.isfile(path):
        return 'file'
    else:
        return 'other'


def both_paths(branch_path, cwd, filename):
    '''Given the branch path and current working directory, will
    return the project path for a file, and the bromine path for a
    file'''
    from os.path import normpath, relpath, join
    project_path = normpath(relpath(join(PROJECT_DIR, filename), cwd))
    bromine_path = normpath(join(relpath(branch_path, cwd), filename))
    return project_path, bromine_path


def dir_size(path):
    '''Returns a human readable string of the total size of a directory'''
    du_output = subprocess.check_output(
        ['du', '--summarize', '--human-readable', path])
    return re.search(r'^([\w.]+)\t', du_output).groups()[0]

def branch_dir(branchname):
    '''Returns the branch directory name for the given branch'''
    return os.path.join(BRANCHES_DIR, branchname)

@main.command('list')
@click.option('--size', '-s', is_flag=True, default=False,
              help="List size of stored files")
def list_cmd(size):
    '''List the branches managed by bromine'''
    str_size = ''
    for branch in os.listdir(BRANCHES_DIR):
        if size:
            str_size = dir_size(os.path.join(BRANCHES_DIR, branch))
        echo("{}\t{}", branch, str_size)

@main.command()
@click.argument('branch')
@click.option('--force', is_flag=True, default=False,
              help="Don't interact, just delete the directory")
def delete(branch, force):
    '''Delete stored files for a branch'''
    branch_path = branch_dir(branch)
    if not os.path.isdir(branch_path):
        echo("{} is not currently tracked by bromine.", branch)
        return
    size = dir_size(branch_path)
    click.confirm("Are you sure you want to delete all stashed files for {}?\n"
                  "It currently has a size of {}".format(branch, size))

@main.group()
def server():
    '''Server commands'''

@server.command()
def start():
    '''Start the server'''
    trace("Starting the server...")
    trace("executing {}", O.start_cmd)
    destructive_subcall(O.start_cmd, shell=True)

@server.command()
def stop():
    '''Stop the server'''
    trace("Stopping the server...")
    trace("executing {}", O.stop_cmd)
    return destructive_subcall(O.stop_cmd, shell=True)

@server.command()
@click.pass_context
def restart(ctx):
    '''Restart the server'''
    trace("Restarting the server...")
    trace("executing {}", O.restart_cmd)
    if not O.restart_cmd:
        stop_result = ctx.invoke(stop)
        start_result = ctx.invoke(start)
        return start_result + stop_result
    else:
        return destructive_subcall(O.restart_cmd, shell=True)


@main.command()
def walk():
    global DRY_RUN
    DRY_RUN = False
    behavior = 'stash'
    cwd = os.getcwd()
    branch_path = branch_dir(get_current_branch())
    if behavior == 'stash':
        for path in clean_report(PROJECT_DIR):
            source, dest = both_paths(branch_path, cwd, path)
            ptype = path_type(path)
            if ptype in ('file', 'dir'):
                move(source, dest)
            else:
                echo("Skipping {} because it isn't a file or directory", path)
    else:
        proj_dir, br_dir = both_parts(branch_path, cwd, '.')
        move(br_dir, proj_dir)

def _move_merge(source, dest):
    from os.path import join, exists, relpath
    for source_path, dirnames, filenames in os.walk(source):
        dest_path = join(dest, relpath(source_path, source))
        if not os.path.exists(dest_path):
            pass
            # echo("Creating dir {}", dest_path)
        else:
            trace("{} already exists", dest_path)
        # trace("Moving {} files in {}", len(filenames), source_path)
        for filename in filenames:
            dest_file = join(dest_path, filename)
            source_file = join(source_path, filename)
            if exists(dest_file):
                echo("Aborting: File already exists: {}", dest_file)
                return False
            elif path_type(source_file) != "file":
                trace("Skipping non file {}", source_file)
            else:
                move(source_file, dest_file)
        try:
            rmdir(source_path)
        except OSError as e:
            if e.errno != errno.ENOTEMPTY:
                raise


def get_current_branch():
    '''Finds the current git branch in the project directory'''
    branch = subprocess.Popen(
        ['git', 'symbolic-ref', '--quiet', '--short', 'HEAD'],
        cwd=PROJECT_DIR,
        stdout=subprocess.PIPE,
    )
    return branch.stdout.read().strip()

def get_last_checkout(project_dir):
    "Scans the reflog looking for a line that looks like a branch switch"
    reflog = subprocess.Popen(
        ['git', 'reflog'],
        cwd=PROJECT_DIR,
        stdout=subprocess.PIPE,
    )
    checkout = re.compile(r'checkout: moving from (.*) to (.*)')
    for line in reflog.stdout:
        checkout_match = checkout.search(line)
        if checkout_match:
            depart, arrive = checkout_match.groups()
            if depart == arrive:
                continue # not interesting, moved to the same branch
            reflog.terminate()
            return depart, arrive
    else:
        echo("Could not find a checkout line in the reflog!", err=True)
        exit(1)


def git_ancestor_compare(A, B):
    '''Determines if the the departure branch is a descendent of the
    arrival branch.'''
    def is_ancestor(a, b):
        return subprocess.Popen(
            ['git', 'merge-base', '--is-ancestor', A, B],
            cwd=PROJECT_DIR,
        ).wait() == 0

    if is_ancestor(A, B):
        return "ancestor"
    elif is_ancestor(B, A):
        return "descendent"
    else:
        return "incomparable"


def semantic_ancestor_compare(A, B):
    '''Semantic ancestry is based on version comparison.'''
    version_re = re.compile(r'v(\d+).(\d+).(\d+|x)')
    search_a = version_re.search(A)
    search_b = version_re.search(B)
    if not search_b or not search_a:
        return "incomparable"
    major_a, minor_a, patch_a = search_a.groups()
    major_b, minor_b, patch_b = search_b.groups()
    if int(major_a) < int(major_b):
        return "ancestor"
    elif int(major_a) > int(major_b):
        return "descendent"
    elif int(minor_a) < int(minor_b):
        return "ancestor"
    elif int(minor_a) > int(minor_b):
        return "descendent"
    elif 'x' in (patch_a, patch_b):
        return "ancestor"
    else:
        # maybe later let the user define patch ancestry
        return "ancestor"


if __name__ == '__main__':
    '''Commands I'd like:
    br new (create a new branch)
      - have the option to link it to a github issue
      - have the option to create it from an existing project
    br list
    br delete (delete a bromine config for a branch)
    br close (like delete but just archives it, closing the github issue associated)
    br switch (switch configurations, branches, build and reboot the server)
    br server reboot (restart the server for a branch)
    br server stop (stop the server)
    br server start (start the server)
    br scale +2 (add two servers to the cluster)
    '''
    main()
